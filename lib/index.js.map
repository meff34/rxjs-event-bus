{"version":3,"sources":["../src/index.js"],"names":["Subject","Observable","mergeAll","Bus","constructor","streams","Map","subjectsEmitter","pipe","select","type","createStreamIfNotExists","get","asObservable","read","emit","event","next","has","set","updateMainStream","bus","subscribe","e","console","log","payload"],"mappings":"AAEA,SAASA,OAAT,EAAkBC,UAAlB,QAAoC,MAApC;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AASA,OAAO,MAAMC,GAAN,CAAU;;AAOfC,gBAAc;AAAA,SAFdC,OAEc,GAFqB,IAAIC,GAAJ,EAErB;;AACZ,SAAKC,eAAL,GAAwB,IAAIP,OAAJ,EAAD,CAAgBQ,IAAhB,CAAqBN,UAArB,CAAvB;AACD;;AAEDO,SAAOC,IAAP,EAAoC;AAClC,SAAKC,uBAAL,CAA6BD,IAA7B;AACA,WAAO,KAAKL,OAAL,CAAaO,GAAb,CAAiBF,IAAjB,EAAuBG,YAAvB,EAAP;AACD;;AAEDC,SAAO;AACL,WAAO,KAAKP,eAAL,CAAqBM,YAArB,EAAP;AACD;;AAEDE,OAAKC,KAAL,EAAyB;AACvB,SAAKL,uBAAL,CAA6BK,MAAMN,IAAnC;;AAEA,SAAKL,OAAL,CAAaO,GAAb,CAAiBI,MAAMN,IAAvB,EAA6BO,IAA7B,CAAkCD,KAAlC;AACD;;AAEDL,0BAAwBD,IAAxB,EAAyC;AACvC,QAAI,CAAC,KAAKL,OAAL,CAAaa,GAAb,CAAiBR,IAAjB,CAAL,EAA6B;AAC3B,WAAKL,OAAL,CAAac,GAAb,CAAiBT,IAAjB,EAAuB,IAAIV,OAAJ,EAAvB;AACA,WAAKoB,gBAAL,CAAsBV,IAAtB;AACD;AACF;;AAEDU,mBAAiBV,IAAjB,EAAkC;AAChC,SAAKH,eAAL,CAAqBU,IAArB,CAA0B,KAAKZ,OAAL,CAAaO,GAAb,CAAiBF,IAAjB,CAA1B;AACD;AAnCc;;AAsCjB,MAAMW,MAAM,IAAIlB,GAAJ,EAAZ;;AAEAkB,IAAIZ,MAAJ,CAAW,qBAAX,EACGa,SADH,CACaC,KAAKC,QAAQC,GAAR,CAAY,KAAZ,EAAmBF,CAAnB,EAAsB,IAAtB,CADlB;AAEAF,IAAIZ,MAAJ,CAAW,wBAAX,EACGa,SADH,CACaC,KAAKC,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,CAAlB,EAAqB,IAArB,CADlB;;AAGAF,IAAIP,IAAJ,GACGQ,SADH,CACaC,KAAKC,QAAQC,GAAR,CAAY,qBAAZ,EAAmCF,CAAnC,EAAsC,IAAtC,CADlB;;AAGAF,IAAIZ,MAAJ,CAAW,OAAX,EACGa,SADH,CACaC,KAAKC,QAAQC,GAAR,CAAY,OAAZ,EAAqBF,CAArB,EAAwB,IAAxB,CADlB;;AAIAF,IAAIP,IAAJ,GACGQ,SADH,CACaC,KAAKC,QAAQC,GAAR,CAAY,mBAAZ,EAAiCF,CAAjC,EAAoC,IAApC,CADlB;;AAGAF,IAAIZ,MAAJ,CAAW,wBAAX,EACGa,SADH,CACaC,KAAKC,QAAQC,GAAR,CAAY,IAAZ,EAAkBF,CAAlB,EAAqB,IAArB,CADlB;;AAGAF,IAAIN,IAAJ,CAAS,EAACL,MAAM,qBAAP,EAA8BgB,SAAS,CAAvC,EAAT;AACAL,IAAIN,IAAJ,CAAS,EAACL,MAAM,wBAAP,EAAiCgB,SAAS,CAA1C,EAAT;AACAL,IAAIN,IAAJ,CAAS,EAACL,MAAM,OAAP,EAAgBgB,SAAS,CAAzB,EAAT","file":"index.js","sourcesContent":["// @flow\n\nimport { Subject, Observable } from 'rxjs'\nimport { mergeAll } from 'rxjs/operators';\n\ntype EventType = 'trading_signals:add' | 'trading_signals:remove' | 'event'\n\ntype Event = {\n  type: EventType,\n  payload: *,\n}\n\nexport class Bus {\n  mainStream: Observable\n  subject: Subject\n  subjectsEmitter: Subject\n  defaultCacheSize: number\n  streams: Map<EventType, Subject> = new Map()\n\n  constructor() {\n    this.subjectsEmitter = (new Subject()).pipe(mergeAll())\n  }\n\n  select(type: EventType): Observable {\n    this.createStreamIfNotExists(type)\n    return this.streams.get(type).asObservable()\n  }\n\n  read() {\n    return this.subjectsEmitter.asObservable();\n  }\n\n  emit(event: Event): void {\n    this.createStreamIfNotExists(event.type)\n\n    this.streams.get(event.type).next(event)\n  }\n\n  createStreamIfNotExists(type: EventType) {\n    if (!this.streams.has(type)) {\n      this.streams.set(type, new Subject())\n      this.updateMainStream(type)\n    }\n  }\n\n  updateMainStream(type: EventType) {\n    this.subjectsEmitter.next(this.streams.get(type));\n  }\n}\n\nconst bus = new Bus()\n\nbus.select('trading_signals:add')\n  .subscribe(e => console.log('add', e, '\\n'))\nbus.select('trading_signals:remove')\n  .subscribe(e => console.log('rm', e, '\\n'))\n\nbus.read()\n  .subscribe(e => console.log('merged before event', e, '\\n'))\n\nbus.select('event')\n  .subscribe(e => console.log('event', e, '\\n'))\n\n\nbus.read()\n  .subscribe(e => console.log('merged, after all', e, '\\n'))\n\nbus.select('trading_signals:remove')\n  .subscribe(e => console.log('rm', e, '\\n'))\n\nbus.emit({type: 'trading_signals:add', payload: 1})\nbus.emit({type: 'trading_signals:remove', payload: 1})\nbus.emit({type: 'event', payload: 1})\n"]}